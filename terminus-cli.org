#+TITLE: Python CLI tool for TerminusDB
#+AUTHOR: Gabriel X. S. Smith
#+LATEX_HEADER:\usepackage{minted}
* Abstract 
  This is a non-interactive python cli tool that helps with the
  interface with terminalDB, It is currently being developed with
  testing being done on the Terminus docker image. This project also
  will attempt to impliment functional programming programming styles

* TODO Glossary
  View the official terminusdb website for terms and definitions
* Backend
  The main library that that is used is the TerminusDB python client
  provided at
  https://terminusdb.github.io/terminusdb-client-python/modules.html
  by the terminusDB developers.

  #+NAME:main_imports
  #+BEGIN_SRC python 
  import terminusdb_client
  #+END_SRC
* Memos
** [2020-07-02 Thu 13:33]
   The best course of action most likely is to do the argument
   handling later since I don't know how difficult that will be. I
   will define an interface so that I can develop other parts of the
   system first.
** [2020-07-02 Thu 18:42]
   To think of this project in chains is the best idea. Individually
   developing each action's command line data structure and then
   calling the associated function(s) to allow for easy extendability.
   
   In this project each action that the user wishes to take with the
   database is seen as a chain of instructions (individual functions
   written specifically for that action) which have little-to-no
   dependancy on code written within another chain. There are no
   handler classes/objects. If code is written that is to apply for
   more than one chain, it is to be applicable to all chains as well
   and therefore must be generalized and well defined in behavior.

*** Specifcs of this project
    As for the specifics of this project. The abstract chains start at
    user command-line input and end at the database library. It is
    quite the simple, a translation layer that make more friendly
    commands from the user to the terminusDB database at the command
    line interface. Due to the translation nature of this software
    there is heavy focus on argument parsing and the attempts to make
    it as compact and simple as possible while still allowing for large
    variety in the possible commands issued.  This is why the first
    part in the chain is modal parsing methods.

    The modal/action parsing methods are given the list of arguments
    that the sys module provides after determining which action/mode
    the user wishes to execute. These methods will construct from the
    command line arguments data structures of optional and positional
    arguments to then send to functions that will call into the
    TerminusDB client library.

    Due to the nature of some of the library calls it is benefital to
    us to individually impliment each feature separate from each other
    since certain actions may have to parse arguments differently
    compared to other actions. This also allows for us to easily
    impliment new features and align with the functional programming
    paradigm with the least risk of breaking a foundational part. I
    also just really don't feel like it is possible to generalize these
    parsing functions without obscene complexity and I don't want to do
    it. Maybe at a later date I will make general these parsing
    functions.
** [2020-07-06 Mon 14:39]
   We will impliment each action and sub action (in it's entirety) in
   a function for the sake of easy maintaininence. I may make a
   dedicated parsing function in the future but at the moment is not
   needed.
** [2020-07-07 Tue 23:26]
   - Have to strighten out how I am going to describe modal parsing
     within text.
** [2020-07-30 Thu 10:13]
   - Heavily considering a migrate to full functional programming for
     the sake of consistency and because of new knowledge of the
     paradigm. Instead of omitting recursion. Need to figure out how
     to do that in python however.
** [2020-08-01 Sat 15:48]
   - Will want to add functionality that extends upon base client
     cababilities. Performing specific operations that help with
     something like the "abstract filesystem," or other ways a user may
     want to use their database.

   - Will want to have the ability for the users to define their own
     subcommands at one point via configuration file possible. This is
     more a long term goal than anything as at the moment I have yet to
     impliment basic functionality, let alone query capabilities.

   - argparse sub parsers don't fit well with document layout and
     functional programming standards. This is a race condition that I
     have found myself in somewhat.

   - We will try to keep each action seperated within its own section in
     the org file.

* Research
  This section is simply a section that allows for free flowing
  thought and notetaking when regarding something about inteeracting
  with TerminusDB. None of this should be taken as fact, as this is
  where thoughts mature and are nutrued into full fledge ideas and
  knowledge.

** General
   An example of how to use the TerminusDB use is found [[https://terminusdb.com/docs/getting-started/start-tutorials/console_js/#create-a-schema][here]]
** Schemas
   - TerminusDB allows for schemaless databases but heavily encourages
     use of schemas.
     - OWL is used for defining schemas
     - There are javascript and python libraries for schema
       development
   - Schemas define the "Classes" of data which follow closely to how
     classes are described in OOP.
     - Properties are a little confusing.
   - Detailed info on schemas can be found [[https://terminusdb.com/docs/user-guide/schema][here]] and in section
     "Classes ​& Properties" [[https://terminusdb.com/docs/getting-started/intro-graph/][here]]
** Data Mutation
   Data mutation and definition is done completely via WOQL queries.
** Library Models
   The database client is an object which has many methods.
* Command-Line Parser
  This is where nearly all program flow is determined. There must be a
  translation interface in place to convert comanndline arguments into
  usable structures within python. Code blocks concerning certain
  sections under [[id:79700b07-71e5-4a72-8fb7-297604fbe3cc][Actions/Modes]] will be placed into the sister section
  [[id:c7c42c51-3351-44c9-8c1d-9f4bbb11393c][Interface]], for the sake of reader convenience while also allowing
  for some separation between ideas and actual code documentation. 
** TODO
   - Generalize argument parsing for the sake of ease of use in the
     future.
** Actions/Modes
   :PROPERTIES:
   :ID:       79700b07-71e5-4a72-8fb7-297604fbe3cc
   :END:
   Actions/Modes allow for a more condensed command line interface and
   they will therefore be used. However, in this program there are two
   positional arguemnts that are required to prefix any mode
   arguments: the database url and action.

*** add-database
    This action adds a database to TerminusDB instance found at url.
**** Required Arguements
     - Database ID
     - Username/AccountID
     - Password
     - Database Label
	
**** Optional Arguments
     - A description
     - Prefixes
     - Lack of Schema

*** RESEARCHING add-node
    :LOGBOOK:
    - Note taken on [2020-07-01 Wed 23:23] \\
      Seems to need a WOQL to import data
    - Note taken on [2020-07-01 Wed 21:57] \\
      Need to research how the database stores data after a database is created 
    :END:
**** Positional Arguements
     
**** Optional Arguments
*** VERIFY rm-database
**** Positional Arguements
     1. database-ID
**** Optional Arguments

     - Password
*** VERIFY query
**** Positional Arguements
     1. WOQL Query
**** Optional Arguments
     - Commit message
     - File list
*** vcs	      
**** VERIFY Checkout
***** Positional Arguements
      1. branchid
***** Optional Arguements
**** VERIFY branch
***** Positional Arguments
      1. branchid
***** Optional Arguments
**** VERIFY pull
***** Positional Arguments
      1. remote-repo
***** Optional Arguments
**** VERIFY fetch
***** Positional Arguments
      1. remote-repo 
***** Optional Arguments
**** VERIFY push
***** Positional Arguments
      1. remote-repo
***** Optional Arguments
**** VERIFY rebase
***** Positional Arguments
      1. rebase-source
***** Optional Arguments
**** VERIFY clone
***** Positional Arguments
      1. remote-source
      2. newid
***** Optional Arguments
**** VERIFY repo
***** Positional Arguments
***** Optional Arguments
      - repoid

** Interface
   :PROPERTIES:
   :ID:       c7c42c51-3351-44c9-8c1d-9f4bbb11393c
   :END:
   :LOGBOOK:
   - Note taken on [2020-07-07 Tue 23:58] \\
     May want to use POSIX syntax for arguments
   :END:
   This interface is the interface that is used to translate the
   command line arguements into something usable. It will be seperated
   into multiple modes determined by actions. Much like the program
   Heimdall or git.
   
*** Interface imports ​& initialization
    :LOGBOOK:
    - Note taken on [2020-07-30 Thu 18:48] \\
      shhhhhhhhhhh, you don't see the contradictory statements
      ooooooooooooooooooooooo
    - Note taken on [2020-07-07 Tue 23:21] \\
      Have to remember to update this if there is ever a change to how
      parsing is done within every chain
    :END:
    We will use:
    - Our own implimented modal argument parser (having a parser
      function for each mode).
    - The copy library from python and it's shallow copy functionality
      to conform to functional programming.
    - Argparse to handle parsing

    #+NAME:Parser_imports
    #+BEGIN_SRC python :noweb
    import sys
    import copy
    import argparse
    #+END_SRC

***  add-database
    :PROPERTIES:
    :ID:       e8a096ce-4c07-4a69-97ec-d2cbd35b965c
    :END:
    This action adds a database to TerminusDB instance found at url.

**** Description of Operation
     :LOGBOOK:
     - Note taken on [2020-08-01 Sat 11:23] \\
       We could actually just have the main hook contain our parser code,
       even though it would be tangled into the main function within literate
       programming it would still reside in the appropriate 'add-database'
       section.
     - Note taken on [2020-08-01 Sat 00:58] \\
       Having the argument parser used in the main func would be useless as
       you would have to make your own copy of it when you could just
       instanciate a new one and avoid odd inter-function dependancies
     :END:
     This action/mode starts off by being called by the main function
     when the user launches the program specifying the [[id:e8a096ce-4c07-4a69-97ec-d2cbd35b965c][add-database]]
     action on the command-line (ref, [[id:92629282-f4d0-490d-8b03-5b00da4b97d6][Main hook]]). 

     Once called, this action calls a helper function which parses and
     aggregates the command line argument options, returning a hashmap
     with the appropriate kwargs to accomplish the add-database
     action.

     With this hashmap the add-database action passes it into a
     separate helper function which calls into the TerminusDB python
     client, interacting with the TerminusDB instance and creating the
     desired database.

**** Implimentation
     :PROPERTIES:
     :ID:       0876da98-2434-4e2d-b415-b60d0f6ddf8d
     :END:
     :LOGBOOK:
     - Note taken on [2020-07-02 Thu 16:37] \\
       We will need to impliment a check for a boolean argument that does not
       take a value argument, we have to drop the even assumption
     - Note taken on [2020-07-02 Thu 16:33] \\
       This action may have to take multiple '--prefix' arguments from the command line
     :END:
     This will impliment the parsing for the add-database action and
     call the necessary functions to prepare and execute the query.
***** Helper functions
      These functions are generalized for use with The main
      add-database action code
****** READ-NOTE add_database_terminus_execute                       :IMPURE:
       :LOGBOOK:
       - Note taken on [2020-08-01 Sat 01:17] \\
	 Might help to rephrase
       - Note taken on [2020-08-01 Sat 01:16] \\
	 Fix Connectivity
       :END:
	This is a stateful function which executes the prepared
	add_database action on the terminusDB instance. It takes the
	dictionary given to by [[id:e8a096ce-4c07-4a69-97ec-d2cbd35b965c][add-database]] action and connect and
	creates the new database to the TerminusDB instance
	#+NAME:add_database_terminus_execute
	#+BEGIN_SRC python
	def add_database_terminus_execute(kwargs):

		# Functional Programming stuffs
		kwargs = copy.copy(kwargs)

		# Query Database and Add New Database
		client=terminusdb_client.WOQLClient(server_url = kwargs['url'])
		client.connect(
			account = kwargs['accountid'],
			key     = kwargs['pass'],
			user    = kwargs['accountid'])

		client.account(kwargs['accountid'])
		client.create_database(
			kwargs['dbid'],
			kwargs['accountid'],
			label          = kwargs['label'], # label require otherwise will fail to add DB
			description    = kwargs['desc'],
			prefixes       = kwargs['prefix'],
			include_schema = kwargs['schema'])
		return 0

	#fed
	#+END_SRC

	#+RESULTS: add_database_terminus_execute
	: None

****** READ-NOTE add_database_parse_args                               :PURE:
       :LOGBOOK:
       - Note taken on [2020-08-01 Sat 01:33] \\
	 Impliment prefixes
       - Note taken on [2020-07-30 Thu 20:42] \\
	 Check whether spaces are allowed within descriptions, labels or
	 database IDs
       :END:
       This function returns a dictionary/hashmap of the necessary
       keyword arguments for the add_database action. This function is
       considered pure since command line argument namespace passed to
       the program are reasonably assumed to be unchanging.

       The parsing that this function does will stay here within its
       own separate function just to keep functions small and self
       descriptive. Even if it may seem a bit useless for this
       specific action.
       #+NAME:add_database_parse_args
       #+BEGIN_SRC python
       def add_database_parse_args(options):

	       #// Oh how I love my curly braces,
	       #// and C syntax
	       kwargs = \
		       {
			       "url":options.url,
			       'accountid':options.account,
			       "dbid":options.dbid,
			       "desc":None,
			       "pass":options.password,
			       "prefix":None,
			       "label":options.label,
			       "schema":options.no_schema
		       }

	       # Allow the user to spread their description over multiple
	       # options.
	       if options.description != None:
		       kwargs['desc'] = " ".join(options.description);


	       # this is placeholder until I figure out how prefixes work
	       if options.prefix != None:
		       kwargs['prefix'] = " ".join(options.prefix);

	       return kwargs;
       #fed
       #+END_SRC
****** add_database_notify_user                                      :IMPURE:
       This function is impure as it performs IO operations. Serving
       notifications to the user about the state of the add-database
       action. This is really just here for stylistic purposes and is
       just a wrapper around the print function.
       #+NAME:add_database_notify_user
       #+BEGIN_SRC python
       def add_database_notify_user(string):
	       print(string)
       #+END_SRC
       
***** Action definition                                                :PURE:
      :PROPERTIES:
      :ID:       1019d8af-8e34-4af9-aace-f5e5b9a914a3
      :END:
      :LOGBOOK:
      - Note taken on [2020-08-01 Sat 15:42] \\
	Never mind that, the terminusDB python client verifies for us
      - Note taken on [2020-07-20 Mon 15:16] \\
	May want to define a way to verify url integrity, or simply
        program for the successive case (partly of the functional
        way).
      :END:
      This is the function where the add-database fuctionality is
      initiated. It expects an object retruned from the parse_arg
      function of an argparse parser. It calls other helper functions
      to perform its operations, ref [[*Helper functions][Helper functions]]. This is a
      stateless function
     #+NAME:add-database_action
     #+BEGIN_SRC python :noweb yes
     <<add_database_notify_user>>
     <<add_database_terminus_execute>>
     <<add_database_parse_args>>
     def add_database_action(options):
	     kwargs = add_database_parse_args(options);
	     add_database_terminus_execute(kwargs);
	     return 0
     #fed
     #+END_SRC

***** Main hook
      :PROPERTIES:
      :ID:       92629282-f4d0-490d-8b03-5b00da4b97d6
      :END:
      This is simply the snippet of code makes the main function
      execute the add-database action when called for at the command
      line. I call it a hook for the sake of easy comprehension.

      #+NAME:add-database_hook
      #+BEGIN_SRC python
      add_database_parser=subparsers.add_parser('add-database', help="Action to create database within specified TerminusDB instance");

      add_database_parser.add_argument("url",help="The base url for the TerminusDB instance");
      add_database_parser.add_argument("dbid",help="The ID for the new databaase");
      add_database_parser.add_argument("-u","--account",help="The username/account to login with",
				       required=True);
      add_database_parser.add_argument("-d","--description",
				       help="The description for the new database",
				       action="append");
      add_database_parser.add_argument("-j","--prefix",
				       help="The prefixes for the new database",
				       action="append");
      add_database_parser.add_argument("-p","--password",
				       help="Password to login with",
				       required=True);
      add_database_parser.add_argument("-l","--label",
				       help="The label for the database(no spaces allowed)",
				       required=True);
      add_database_parser.add_argument("-n","--no-schema",
				       help="Disable schema for the new database");
      add_database_parser.set_defaults(func=add_database_action);

      #+END_SRC

***  add-node
***  rm-database
***  query
***  vcs	      
****  Checkout
****  branch
****  pull
****  fetch
****  push
****  rebase
****  clone
****  repo
* Files
** Terminus-cli.py
   :PROPERTIES:
   :ID:       37643e89-278b-480c-8205-2bb52ee03f17
   :END:
   #+NAME:Main-file
   #+BEGIN_SRC python :tangle terminus-cli.py :noweb yes
   #!/usr/env/python3
   <<main_imports>>
   <<Parser_imports>>
   <<add-database_action>>
   def main():
	   parser=argparse.ArgumentParser();
	   subparsers = parser.add_subparsers();
	   <<add-database_hook>>
	   options = parser.parse_args();
	   options.func(options);

       return 0;
   #fed

   if __name__ == "__main__":
       main()
   #fi
   #+END_SRC
